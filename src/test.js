// import PriorityQueue from 'js-priority-queue.js'
const PriorityQueue = require('js-priority-queue')
var queue = new PriorityQueue({
    comparator: function(a1, a2) {
        return a1[0][0] - a2[0][0];
    }
});
var n = 10,
    m = 10;
var vis = []
var vis = new Array(n);
for(let i=0;i<n;i++)vis[i] = new Array(m).fill(0);
    var g = vis,
    h = vis,
    f = [
        [10000000000, 10000000000, 10000000000, 10000000000, 10000000000, 10000000000, 10000000000,
            10000000000, 10000000000, 10000000000
        ],
        [10000000000, 10000000000, 10000000000, 10000000000, 10000000000, 10000000000, 10000000000,
            10000000000, 10000000000, 10000000000
        ],
        [10000000000, 10000000000, 10000000000, 10000000000, 10000000000, 10000000000, 10000000000,
            10000000000, 10000000000, 10000000000
        ],
        [10000000000, 10000000000, 10000000000, 10000000000, 10000000000, 10000000000, 10000000000,
            10000000000, 10000000000, 10000000000
        ],
        [10000000000, 10000000000, 10000000000, 10000000000, 10000000000, 10000000000, 10000000000,
            10000000000, 10000000000, 10000000000
        ],
        [10000000000, 10000000000, 10000000000, 10000000000, 10000000000, 10000000000, 10000000000,
            10000000000, 10000000000, 10000000000
        ],
        [10000000000, 10000000000, 10000000000, 10000000000, 10000000000, 10000000000, 10000000000,
            10000000000, 10000000000, 10000000000
        ],
        [10000000000, 10000000000, 10000000000, 10000000000, 10000000000, 10000000000, 10000000000,
            10000000000, 10000000000, 10000000000
        ],
        [10000000000, 10000000000, 10000000000, 10000000000, 10000000000, 10000000000, 10000000000,
            10000000000, 10000000000, 10000000000
        ],
        [10000000000, 10000000000, 10000000000, 10000000000, 10000000000, 10000000000, 10000000000,
            10000000000, 10000000000, 10000000000
        ]
    ],
    as = [];
var par = [
    [
        [0, 0],
        [0, 0],
        [0, 0],
        [0, 0],
        [0, 0],
        [0, 0],
        [0, 0],
        [0, 0],
        [0, 0],
        [0, 0]
    ],
    [
        [0, 0],
        [0, 0],
        [0, 0],
        [0, 0],
        [0, 0],
        [0, 0],
        [0, 0],
        [0, 0],
        [0, 0],
        [0, 0]
    ],
    [
        [0, 0],
        [0, 0],
        [0, 0],
        [0, 0],
        [0, 0],
        [0, 0],
        [0, 0],
        [0, 0],
        [0, 0],
        [0, 0]
    ],
    [
        [0, 0],
        [0, 0],
        [0, 0],
        [0, 0],
        [0, 0],
        [0, 0],
        [0, 0],
        [0, 0],
        [0, 0],
        [0, 0]
    ],
    [
        [0, 0],
        [0, 0],
        [0, 0],
        [0, 0],
        [0, 0],
        [0, 0],
        [0, 0],
        [0, 0],
        [0, 0],
        [0, 0]
    ],
    [
        [0, 0],
        [0, 0],
        [0, 0],
        [0, 0],
        [0, 0],
        [0, 0],
        [0, 0],
        [0, 0],
        [0, 0],
        [0, 0]
    ],
    [
        [0, 0],
        [0, 0],
        [0, 0],
        [0, 0],
        [0, 0],
        [0, 0],
        [0, 0],
        [0, 0],
        [0, 0],
        [0, 0]
    ],
    [
        [0, 0],
        [0, 0],
        [0, 0],
        [0, 0],
        [0, 0],
        [0, 0],
        [0, 0],
        [0, 0],
        [0, 0],
        [0, 0]
    ],
    [
        [0, 0],
        [0, 0],
        [0, 0],
        [0, 0],
        [0, 0],
        [0, 0],
        [0, 0],
        [0, 0],
        [0, 0],
        [0, 0]
    ],
    [
        [0, 0],
        [0, 0],
        [0, 0],
        [0, 0],
        [0, 0],
        [0, 0],
        [0, 0],
        [0, 0],
        [0, 0],
        [0, 0]
    ]
];
var ar = [
    
        [1,1,1,1,1,1,1,1,1,1],
        [1,4,7,0,0,6,0,0,0,1],
        [1,0,1,1,1,1,0,0,0,1],
        [1,0,1,0,0,0,0,0,0,1],
        [1,0,1,0,0,1,1,1,0,1],
        [1,0,1,0,0,0,0,1,0,1],
        [1,0,1,0,0,0,0,1,0,1],
        [1,0,0,0,0,0,0,1,0,1],
        [1,0,1,1,1,0,0,0,0,1],
        [1,1,1,1,1,1,1,1,1,1],
    
]
var src = [1, 1],
    des = [8, 8];
/*queue.queue([
    [3],
    [1, 4]
]);
queue.queue([
    [10],
    [7, 8]
]);
queue.queue([
    [1],
    [12, 14]
]);*/
const isDestination = (x, y) => {
    if (x === des[0] && y === des[1]) return 1;
    return 0;
}
const isValid = (x, y) => {
    if (x >= 0 && x < n && y >= 0 && y < m) return 1;
    return 0;
}
const huristic = (x, y) => {
    var xx = Math.abs(x - des[0]),
        yy = Math.abs(y - des[1]);
    xx = xx * xx + yy * yy;
    xx = Math.sqrt(xx);
    return xx;
}

queue.queue([
    [0],
    [src[0], src[1]]
]);
var fx = [0, 1, 0, -1];
var fy = [1, 0, -1, 0];
/*for (let i = 0; i < 34; i++) {
    for (let j = 0; j < 34; j++) {
        h[i][j] = huristic(i, j);
    }
}*/
console.log(queue.length);
while (queue.length > 0) {
    let cur = queue.dequeue();
    console.log('cur', cur);
    let x = cur[1][0],
        y = cur[1][1];
    for (let i = 0; i < 4; i++) {
        let xx = x + fx[i],
            yy = y + fy[i];
        console.log('xy ', xx, yy, fx[i], fy[i], x, y);
        if (!isValid(xx, yy) || ar[xx][yy]) continue;
        if (isDestination(xx, yy)) {
            par[xx][yy] = [x, y];
            break;
        }
        if (vis[xx][yy]) {

        }
        let hh = huristic(xx, yy),
            gg = g[x][y] + 1;
        g[xx][yy] = gg;
        let ff = hh + gg;
        console.log(ff, ' ', f[xx][yy])
        if (ff < f[xx][yy]) {
            f[xx][yy] = ff;
            queue.queue([
                [ff],
                [xx, yy]
            ]);
            par[xx][yy] = [x, y];
        }
    }
    vis[x][y] = 1;
}
let d1 = des[0],
    d2 = des[1];
as.push([8, 8])
while (d1 !== src[0] || d2 !== src[1]) {
    let nxt = par[d1][d2];
    //let n1=nxt[0],n2=nxt[1] ;
    as.push(nxt);
    d1 = nxt[0];
    d2 = nxt[1];
}
let ln = as.length;
for (let i = ln - 1; i >= 0; i--) {
    console.log(as[i],',')
}

/*
[
        [1,1,1,1,1,1,1,1,1,1],
        [1,4,7,0,0,6,0,0,0,1],
        [1,0,1,1,1,1,0,0,0,1],
        [1,0,1,0,0,0,0,0,0,1],
        [1,0,1,0,0,1,1,1,0,1],
        [1,0,1,0,0,0,0,1,0,1],
        [1,0,1,0,0,0,0,1,0,1],
        [1,0,0,0,0,0,0,1,0,1],
        [1,0,1,1,1,0,0,0,0,1],
        [1,1,1,1,1,1,1,1,1,1],   
]
*/